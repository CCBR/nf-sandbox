name: draft-release

on:
  workflow_dispatch:
  push:
    paths:
      - .github/workflows/draft-release.yml

jobs:
  draft-release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # required to include tags
      - uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
      - run: pip install cffconvert>=2.0.0
      - name: Get Date
        run: |
          echo "DATE=$(date +"%Y-%m-%d")" >> "$GITHUB_ENV"
          echo "LATEST_VERSION=$(git describe --tags --abbrev=0)" >> "$GITHUB_ENV"
      - name: Get current and next versions
        id: semver
        uses: ietf-tools/semver-action@v1
        with:
          token: ${{ github.token }}
          branch: ${{ github.ref_name }}
      - name: Select next version
        run: |
          echo ${{ steps.semver.outputs.next }}
      - name: Update changelog
        run: |
          import os
          latest_version = "${{ steps.semver.outputs.current }}".strip('v')
          next_version = "${{ steps.semver.outputs.next }}".strip('v')
          lines = list()
          with open("CHANGELOG.md", "r") as infile:
            for line in infile:
              if latest_version in line:
                break
              elif line.startswith('#') and 'development version' in line:
                lines.append(line.replace('development version', next_version))
              else:
                lines.append(line)
          release_notes = ''.join(lines)
          with open(".github/latest-release.md", "w") as outfile:
            outfile.write(release_notes)
        shell: python {0}

      - name: Update citation file
        run: |
          from cffconvert.cli.create_citation import create_citation
          from cffconvert.cli.validate_or_write_output import validate_or_write_output
          citation = create_citation('CITATION.cff', None)
          citation._implementation.cffobj['version'] = "${{ steps.semver.outputs.next }}"
          citation._implementation.cffobj['date-released'] = "${{ env.DATE }}"
          validate_or_write_output("CITATION.cff", 'cff', False, citation)
        shell: python {0}

      - name: Tag & draft release
        run: |
          echo ${{ env.RELEASE_NOTES }}
