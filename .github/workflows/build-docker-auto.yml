# This GitHub Actions workflow is designed to trigger a manual Docker build for each modified Dockerfile.
#
# Workflow Name: build-docker-auto
# Short Description: Trigger Build Docker Manual for Each modified Dockerfile
#
# Triggers:
# - On push events to any branch except 'main' and 'dev', if any Dockerfile.* is modified.
# - On pull request events to 'main' and 'dev' branches, if any Dockerfile.* is modified.
#
# Jobs:
#   - Runs on the latest Ubuntu environment.
#   - Steps:
#     1. Check out the repository using actions/checkout@v4.
#     2. Identify modified Dockerfiles using git diff and store them in the environment variable 'dockerfiles'.
#     3. For each modified Dockerfile, trigger the 'build-docker-manual' workflow with the Dockerfile path and additional parameters.
#
# Environment Variables:
# - GITHUB_TOKEN: Used for authentication to trigger the 'build-docker-manual' workflow.

name: build-docker-auto

on:
  push:
    branches:
      - "**autobuild**" # Only trigger if the branch name contains "autobuild"
    paths:
      - "**/Dockerfile.*" # Only trigger if a Dockerfile.* is modified in any directory

  pull_request:
    branches:
      - main
      - dev
    paths:
      - "**/Dockerfile.*" # Only trigger if a Dockerfile.* is modified in any directory

env:
  suffix: ${{ github.base_ref == 'main' && github.event_name == 'pull_request' && 'main' || github.base_ref == 'dev' && github.event_name == 'pull_request' && 'dev' || 'feat' }}
  GITHUB_TOKEN: ${{ github.token }}
permissions:
  contents: read
jobs:
  get-files:
    runs-on: ubuntu-latest
    outputs:
      json: ${{ steps.changed-files.outputs.matched_files_json }}
    steps:
      - name: Checkout repository
        id: checkout
        uses: actions/checkout@v4

      - id: changed-files
        name: Check changed files
        uses: knu/changed-files@v1
        with:
          paths: |
            **/Dockerfile.*

      - name: Show changed files
        id: matrix
        run: |
          echo "matched files:"
          echo "${{ steps.changed-files.outputs.matched_files }}" | sed 's/^/  /'

  # build-docker1:
  #   needs: [get-files]
  #   strategy:
  #     matrix:
  #       file: "${{ fromJson(needs.get-files.outputs.json) }}"
  #     max-parallel: 1
  #   runs-on: ubuntu-latest
  #   permissions:
  #     contents: write
  #     pull-requests: write
  #   steps:
  #     - uses: actions/checkout@v4
  #       name: "checkout PR ${{ github.head_ref }}"
  #       if: github.event_name == 'pull_request'
  #       with:
  #         fetch-depth: 0
  #         ref: ${{ github.head_ref }} # branch name of PR

  #     - uses: actions/checkout@v4
  #       name: "checkout push ${{ github.ref_name }}"
  #       if: github.event_name == 'push'
  #       with:
  #         fetch-depth: 0
  #         ref: ${{ github.ref_name }} # branch name of push

  #     - uses: actions/setup-python@v5
  #       with:
  #         python-version: "3.11"

  #     - name: Install
  #       shell: bash
  #       run: pip install --upgrade pip git+https://github.com/CCBR/actions.git@fix-push-perm

  #     - name: Prepare build-time variables
  #       shell: bash
  #       id: prepare_vars
  #       run: |
  #         prepare_docker_build_variables.sh ${{ matrix.file }} ${{ env.suffix }} kellysovacool

  #     - name: Check variables and create README
  #       shell: bash
  #       id: check_and_create_readme
  #       run: |
  #         echo "DOCKERFILE: $DOCKERFILE"
  #         echo "IMAGENAME: $IMAGENAME"
  #         echo "BASEIMAGENAME: $BASEIMAGENAME"
  #         echo "BUILD_DATE: $BUILD_DATE"
  #         echo "BUILD_TAG: $BUILD_TAG"
  #         echo "REPONAME: $REPONAME"
  #         echo "MDFILE: $MDFILE"
  #         echo -ne "## ${{ github.repository }} $IMAGENAME\n\n" > $MDFILE
  #         echo "Dockerfile source: https://github.com/${{ github.repository }}/blob/${{ github.sha }}/${{ matrix.file }}" >> $MDFILE
  #         echo -ne "\n\n" >> $MDFILE
  #         echo -ne "Built on: $BUILD_DATE \n\n" >> $MDFILE
  #         echo -ne "Build tag: $BUILD_TAG \n\n" >> $MDFILE
  #         echo -ne "Base image: $BASEIMAGENAME \n\n" >> $MDFILE
  #         echo -ne "Dockerfile path in repo: $DOCKERFILE \n\n" >> $MDFILE

  #     - name: Build and push Docker image
  #       id: build_and_push
  #       uses: docker/build-push-action@v5
  #       with:
  #         file: ${{ env.DOCKERFILE }}
  #         push: false
  #         tags: ${{ env.IMAGENAME }}
  #         build-args: |
  #           DOCKERFILE=${{ env.DOCKERFILE }}
  #           BUILD_DATE=${{ env.BUILD_DATE }}
  #           BUILD_TAG=${{ env.BUILD_TAG }}
  #           REPONAME=${{ env.REPONAME }}
  #           IMAGENAME=${{ env.IMAGENAME }}
  #           BASEIMAGENAME=${{ env.BASEIMAGENAME }}

  #     - name: Run print_versions.py inside Docker container
  #       shell: bash
  #       id: run_script_in_container
  #       run: |
  #         set -euo pipefail

  #         SCRIPT=$(which print_versions.py)
  #         echo $SCRIPT
  #         cp $SCRIPT ${{ github.workspace }}

  #         if [ -f scripts/tool.json ]; then
  #           JSON=scripts/tool.json
  #         else
  #           json_src=$(python -c 'import ccbr_actions.data; print(ccbr_actions.data.get_file_path("tool_version_commands.json"))')
  #           cp $json_src ${{ github.workspace }}
  #           JSON=tool_version_commands.json
  #         fi

  #         echo $JSON

  #         docker run --rm -v "${{ github.workspace }}:/ws" ${{ env.IMAGENAME }} \
  #           python3 /ws/print_versions.py --json /ws/${JSON} --output /ws/${{ env.MDFILE }}

  #     - name: upload readme file on failure
  #       uses: actions/upload-artifact@v4
  #       if: success() || failure()
  #       with:
  #         path: ${{ env.MDFILE }}

  build-docker:
    needs: [get-files]
    strategy:
      matrix:
        file: "${{ fromJson(needs.get-files.outputs.json) }}"
      max-parallel: 1
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - uses: actions/checkout@v4
        name: "checkout PR ${{ github.head_ref }}"
        if: github.event_name == 'pull_request'
        with:
          fetch-depth: 0
          ref: ${{ github.head_ref }} # branch name of PR

      - uses: actions/checkout@v4
        name: "checkout push ${{ github.ref_name }}"
        if: github.event_name == 'push'
        with:
          fetch-depth: 0
          ref: ${{ github.ref_name }} # branch name of push

      - uses: CCBR/actions/build-docker@fix-push-perm # TODO change to main after fixing this
        with:
          dockerfile: ${{ matrix.file }}
          dockerhub-namespace: nciccbr
          dockerhub-username: ${{ secrets.DOCKERHUB_USERNAME }}
          dockerhub-token: ${{ secrets.DOCKERHUB_TOKEN }}
          suffix: ${{ env.suffix }}
          push: false
          github-token: ${{ env.GITHUB_TOKEN }}
          ccbr-actions-version: fix-push-perm # TODO change to main after fixing this
